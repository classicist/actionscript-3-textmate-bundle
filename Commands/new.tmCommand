<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -wKU

require ENV['TM_BUNDLE_SUPPORT'] + '/lib/flex_env'

current_line = ENV['TM_CURRENT_LINE']
type_match = /^.*\b(\w+)\b\s*=/
prop = 'Object'

if type_match =~ current_line
	prop = $1
else
	TextMate.exit_insert_text( "new\t" );
end 

c = AsClassParser.new
class_type = c.find_type(STDIN.read.strip,prop)
class_type = "ClassInstance" if class_type == nil

# The adobe code conventions advise the use of these.
short_hand = {
    'Array' =&gt; '[$1]',
    'Object' =&gt; '{$1}',
    'String' =&gt; '"$1"',
    'RegExp' =&gt; '/$1/',
    'XML' =&gt; '&lt;xml/&gt;;'
}

if short_hand.key?(class_type)
    TextMate.exit_insert_snippet( short_hand[class_type] )
end

words = `grep "^#{class_type}\(" "$TM_BUNDLE_PATH/support/data/completions.txt"`.split("\n")
if words.size == 1
	i=0
	snip = "new " + FlexMate.snippetize_method_params(words[0])
else
	snip = "new ${1:#{class_type}}($2);$0"
end

TextMate.exit_insert_snippet( snip )</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>document</string>
	<key>name</key>
	<string>new</string>
	<key>output</key>
	<string>discard</string>
	<key>scope</key>
	<string>source.actionscript.3</string>
	<key>tabTrigger</key>
	<string>new</string>
	<key>uuid</key>
	<string>46DA2BE6-AAF8-4785-8EDA-2C5F9A39F211</string>
</dict>
</plist>
